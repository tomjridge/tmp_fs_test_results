        # Tests for lseek


        ##############################################
        # reads combined with lseek
        ##############################################

        # initialise a file with some text
     8: open f1.txt [O_WRONLY;O_CREAT;O_TRUNC] 0o666
        Tau
        RV_num(3)

     9: write (FD 3) "0123456789" 10
        Tau
        RV_num(10)

    10: close (FD 3)
        Tau
        RV_none


    12: open f1.txt [O_RDONLY]
        Tau
        RV_num(3)


        # read 2 bytes and then 2 again
    15: read (FD 3) 2
        Tau
        RV_bytes("01")

    16: read (FD 3) 2
        Tau
        RV_bytes("23")


        # jump back to beginning
    19: lseek (FD 3) 0 SEEK_SET
        Tau
        RV_num(0)

    20: read (FD 3) 2
        Tau
        RV_bytes("01")


        # jump to absolute position 4
    23: lseek (FD 3) 4 SEEK_SET
        Tau
        RV_num(4)

    24: read (FD 3) 2
        Tau
        RV_bytes("45")


        # jump after end
    27: lseek (FD 3) 5 SEEK_END
        Tau
        RV_num(15)

    28: read (FD 3) 2
        Tau
        RV_bytes("")


        # jump after end
    31: lseek (FD 3) 5 SEEK_END
        Tau
        RV_num(15)

    32: read (FD 3) 2
        Tau
        RV_bytes("")


        # jump 2 before end
    35: lseek (FD 3) -2 SEEK_END
        Tau
        RV_num(8)

    36: read (FD 3) 2
        Tau
        RV_bytes("89")


        # 2 back and try again
    39: lseek (FD 3) -2 SEEK_CUR
        Tau
        RV_num(8)

    40: read (FD 3) 2
        Tau
        RV_bytes("89")


        # jump just to zero
    43: lseek (FD 3) -10 SEEK_CUR
        Tau
        RV_num(0)

    44: read (FD 3) 2
        Tau
        RV_bytes("01")


        # jump too far back (negative resulting offset)
    47: lseek (FD 3) -10 SEEK_CUR
        Tau
        EINVAL

    48: read (FD 3) 2
        Tau
        RV_bytes("23")


        # use wrong whence
    51: lseek (FD 3) 0 5
        Tau
        EINVAL

    52: read (FD 3) 2
        Tau
        RV_bytes("45")


        # check position
    55: lseek (FD 3) 0 SEEK_CUR
        Tau
        RV_num(6)

    56: lseek (FD 3) 0 SEEK_CUR
        Tau
        RV_num(6)


    58: close (FD 3)
        Tau
        RV_none


        # use closed file-descriptor
    61: lseek (FD 3) 0 SEEK_CUR
        Tau
        EBADF


        # use non-existing file-descriptor
    64: lseek (FD 4) 0 SEEK_CUR
        Tau
        EBADF



        ##############################################
        # write and lseek
        ##############################################

        # jump after end of file should do nothing by itself
    72: open f1.txt [O_WRONLY;O_TRUNC] 0o666
        Tau
        RV_num(3)

    73: lseek (FD 3) 5 SEEK_SET
        Tau
        RV_num(5)

    74: close (FD 3)
        Tau
        RV_none


    76: open f1.txt [O_RDONLY]
        Tau
        RV_num(3)

    77: read (FD 3) 100
        Tau
        RV_bytes("")

    78: close (FD 3)
        Tau
        RV_none



        # jump after end of file, then write adds 0s
    82: open f1.txt [O_WRONLY;O_TRUNC] 0o666
        Tau
        RV_num(3)

    83: lseek (FD 3) 5 SEEK_SET
        Tau
        RV_num(5)

    84: write (FD 3) "0123456789" 10
        Tau
        RV_num(10)

    85: close (FD 3)
        Tau
        RV_none


    87: open f1.txt [O_RDONLY]
        Tau
        RV_num(3)

    88: read (FD 3) 100
        Tau
        RV_bytes("\000\000\000\000\0000123456789")

    89: close (FD 3)
        Tau
        RV_none



        # write then jump back and write, jump back, read
    93: open f1.txt [O_RDWR;O_TRUNC] 0o666
        Tau
        RV_num(3)

    94: write (FD 3) "0123456789" 10
        Tau
        RV_num(10)

    95: lseek (FD 3) -2 SEEK_CUR
        Tau
        RV_num(8)

    96: write (FD 3) "XX" 2
        Tau
        RV_num(2)

    97: lseek (FD 3) -6 SEEK_CUR
        Tau
        RV_num(4)

    98: read (FD 3) 2
        Tau
        RV_bytes("45")

    99: write (FD 3) "YY" 2
        Tau
        RV_num(2)

   100: close (FD 3)
        Tau
        RV_none


   102: open f1.txt [O_RDONLY]
        Tau
        RV_num(3)

   103: read (FD 3) 100
        Tau
        RV_bytes("012345YYXX")

   104: close (FD 3)
        Tau
        RV_none



        ##############################################
        # lseek on dirs is not properly supported and 
        # therefore not tested carefully
        ##############################################

   112: mkdir d1 0o777
        Tau
        RV_none

   113: open_close d1/f1.txt [O_WRONLY;O_CREAT] 0o666
        Tau
        RV_none

   114: open_close d1/f2.txt [O_WRONLY;O_CREAT] 0o666
        Tau
        RV_none

   115: open_close d1/f3.txt [O_WRONLY;O_CREAT] 0o666
        Tau
        RV_none



   118: open d1 [O_RDONLY]
        Tau
        RV_num(3)

   119: lseek (FD 3) 0 SEEK_CUR
        Tau
        RV_num(0)

   120: read (FD 3) 10
        Tau
        EISDIR


   122: lseek (FD 3) 4 SEEK_CUR
        Tau
        RV_num(4)

   123: read (FD 3) 10
        Tau
        EISDIR


        # the following fail with a oveflow
   126: lseek (FD 3) 0 SEEK_END
        Tau
        EOVERFLOW

   127: lseek (FD 3) -2000 SEEK_END
        Tau
        EOVERFLOW


   129: lseek (FD 3) 0 SEEK_SET
        Tau
        RV_num(0)

   130: read (FD 3) 10
        Tau
        EISDIR


   132: lseek (FD 3) 10 SEEK_SET
        Tau
        RV_num(10)

   133: read (FD 3) 10
        Tau
        EISDIR


   135: close (FD 3)
        Tau
        RV_none


trace accepted
