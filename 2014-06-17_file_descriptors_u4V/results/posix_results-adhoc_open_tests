        # Tests for open and close

        ##############################################
        # basic cases that should work
        ##############################################

        # create a file with some content
     7: open f1.txt [O_WRONLY;O_CREAT] 0o644
        RV_num(3)
     8: write (FD 3) "0123456789" 10
        RV_num(10)
     9: close (FD 3)
        RV_none

        # read that file again
    12: open f1.txt [O_RDONLY]
        RV_num(3)
    13: read (FD 3) 100
        RV_bytes("0123456789")
    14: close (FD 3)
        RV_none

        # read-write 
    17: open f1.txt [O_RDWR]
        RV_num(3)
    18: write (FD 3) "ABCDE" 5
        RV_num(5)
    19: lseek (FD 3) 0 SEEK_SET
        RV_num(0)
    20: read (FD 3) 100
        RV_bytes("ABCDE56789")
    21: close (FD 3)
        RV_none

        # write only on existing file
    24: open f1.txt [O_WRONLY]
        RV_num(3)
    25: write (FD 3) "012" 3
        RV_num(3)
    26: close (FD 3)
        RV_none

        # read that file again
    29: open f1.txt [O_RDWR]
        RV_num(3)
    30: read (FD 3) 100
        RV_bytes("012DE56789")
    31: close (FD 3)
        RV_none

        # open for execute 
    34: open f1.txt [O_RDONLY]
        RV_num(3)
    35: read (FD 3) 100
        RV_bytes("012DE56789")
    36: close (FD 3)
        RV_none


    39: mkdir d1 0o755
        RV_none

        # open directory for searching
    42: open d1 [O_RDONLY]
        RV_num(3)
    43: read (FD 3) 100
        EISDIR
    44: close (FD 3)
        RV_none


        ##############################################
        # opening problems with 
        # non-existing files and dirs
        ##############################################

    52: open non-such-file.txt [O_RDONLY]
        ENOENT
    53: read (FD 3) 100
        EBADF
    54: close (FD 3)
        EBADF

    56: open /no_such_dir/non-such-file.txt [O_RDONLY]
        ENOENT
    57: read (FD 3) 100
        EBADF
    58: close (FD 3)
        EBADF

    60: open non-such-dir/ [O_RDONLY]
        ENOENT
    61: read (FD 3) 100
        EBADF
    62: close (FD 3)
        EBADF

    64: open /no_such_dir/non-such-dir2/ [O_RDONLY]
        ENOENT
    65: read (FD 3) 100
        EBADF
    66: close (FD 3)
        EBADF

        # opening an existing file with a slash at the end
    69: open f1.txt/ [O_RDONLY]
        ENOTDIR
    70: read (FD 3) 100
        EBADF
    71: close (FD 3)
        EBADF


        ##############################################
        # O_CREAT
        ##############################################

        # create without write flag is fine. It create
        # a file (if it does not exist before), but
        # we can only read from it
    81: open f1.txt [O_RDONLY;O_CREAT] 0o644
        RV_num(3)
    82: write (FD 3) "ABCDE" 5
        EBADF
    83: read (FD 3) 100
        RV_bytes("012DE56789")
    84: close (FD 3)
        RV_none

    86: open f2.txt [O_RDONLY;O_CREAT] 0o644
        RV_num(3)
    87: write (FD 3) "ABCDE" 5
        EBADF
    88: pread (FD 3) 100 0
        RV_bytes("")
    89: close (FD 3)
        RV_none
    90: unlink f2.txt
        RV_none

        # if O_EXCL is given the file must not exist
    93: open f1.txt [O_RDWR;O_CREAT;O_EXCL] 0o644
        EEXIST
    94: close (FD 3)
        EBADF

    96: open f2.txt [O_RDWR;O_CREAT;O_EXCL] 0o644
        RV_num(3)
    97: write (FD 3) "ABCDE" 5
        RV_num(5)
    98: pread (FD 3) 100 0
        RV_bytes("ABCDE")
    99: close (FD 3)
        RV_none
   100: unlink f2.txt
        RV_none

        # if O_EXCL but not O_CREATE is set, the result is undefined
        # open f1.txt [O_RDWR;O_EXCL] 0o777
        # close (FD 3)

        # to create a file, we need write access to the parent dir
        #chmod /d1 r-xr-xr-x
   108: open /d1/f3.txt [O_WRONLY;O_CREAT] 0o644
        RV_num(3)
   109: close (FD 3)
        RV_none

        #chmod /d1 rwxr-xr-x
   112: open /d1/f3.txt [O_RDWR;O_CREAT] 0o644
        RV_num(3)
   113: write (FD 3) "ABCDE" 5
        RV_num(5)
   114: pread (FD 3) 100 0
        RV_bytes("ABCDE")
   115: close (FD 3)
        RV_none
   116: unlink /d1/f3.txt
        RV_none

        # the file-permissions of a newly created file don't matter
   119: open /d1/f3.txt [O_RDWR;O_CREAT] 0o444
        RV_num(3)
   120: write (FD 3) "ABCDE" 5
        RV_num(5)
   121: pread (FD 3) 100 0
        RV_bytes("ABCDE")
   122: close (FD 3)
        RV_none

   124: open /d1/f3.txt [O_RDWR]
        EACCES
   125: close (FD 3)
        EBADF

   127: open /d1/f3.txt [O_RDONLY]
        RV_num(3)
   128: read (FD 3) 100
        RV_bytes("ABCDE")
   129: close (FD 3)
        RV_none

        # open does not change the permissions on existing files
   132: open /d1/f3.txt [O_RDONLY;O_CREAT] 0o000
        RV_num(3)
   133: pread (FD 3) 100 0
        RV_bytes("ABCDE")
   134: close (FD 3)
        RV_none

   136: open /d1/f3.txt [O_RDONLY]
        RV_num(3)
   137: read (FD 3) 100
        RV_bytes("ABCDE")
   138: close (FD 3)
        RV_none
   139: unlink /d1/f3.txt
        RV_none

        # not even read permission is needed on newly created files
   142: open /d1/f3.txt [O_RDONLY;O_CREAT] 0o000
        RV_num(3)
   143: pread (FD 3) 100 0
        RV_bytes("")
   144: close (FD 3)
        RV_none

   146: open /d1/f3.txt [O_RDONLY]
        EACCES
   147: read (FD 3) 100
        EBADF
   148: close (FD 3)
        EBADF
   149: unlink /d1/f3.txt
        RV_none


        # O_CREAT flag only creates files not the dirs in path
   153: open /no-such-dir/file.txt [O_RDONLY;O_CREAT] 0o644
        ENOENT
   154: close (FD 3)
        EBADF


        # creating a file without providing a mode is
        # unspecified in Posix. For Linux, the
        # default mode is 0o101
   160: open f2.txt [O_WRONLY;O_CREAT]
        RV_num(3)
   161: close (FD 3)
        RV_none
   162: stat f2.txt
        { st_dev=2049; st_ino=1048801; st_kind=S_IFREG; st_perm=0o101; st_nlink=1; st_uid=0; st_gid=0; st_rdev=0; st_size=0; }
   163: unlink f2.txt
        RV_none

        ##############################################
        # O_TRUNC
        ##############################################

        # O_TRUNC works as expected
   170: unlink f1.txt
        RV_none
   171: open f1.txt [O_WRONLY;O_CREAT] 0o644
        RV_num(3)
   172: write (FD 3) "0123456789" 10
        RV_num(10)
   173: close (FD 3)
        RV_none

   175: open f1.txt [O_RDWR]
        RV_num(3)
   176: read (FD 3) 100
        RV_bytes("0123456789")
   177: close (FD 3)
        RV_none

   179: open f1.txt [O_RDWR;O_TRUNC]
        RV_num(3)
   180: read (FD 3) 100
        RV_bytes("")
   181: close (FD 3)
        RV_none

        # behaviour of O_TRUNC without write flag is undefined
        # on linux architecture, the O_TRUNC just truncates 
        # even in read-only mode
   186: open f1.txt [O_RDWR;O_TRUNC]
        RV_num(3)
   187: write (FD 3) "0123456789" 10
        RV_num(10)
   188: close (FD 3)
        RV_none

   190: open f1.txt [O_RDONLY]
        RV_num(3)
   191: read (FD 3) 100
        RV_bytes("0123456789")
   192: close (FD 3)
        RV_none

   194: open f1.txt [O_RDONLY;O_TRUNC]
        RV_num(3)
   195: read (FD 3) 100
        RV_bytes("")
   196: close (FD 3)
        RV_none

        # but we can't truncate file we don't have write permission to
   199: open f1.txt [O_RDWR;O_TRUNC]
        RV_num(3)
   200: write (FD 3) "0123456789" 10
        RV_num(10)
   201: close (FD 3)
        RV_none

   203: open f1.txt [O_RDONLY]
        RV_num(3)
   204: read (FD 3) 100
        RV_bytes("0123456789")
   205: close (FD 3)
        RV_none

   207: chmod f1.txt 0o444
        RV_none
   208: open f1.txt [O_RDONLY;O_TRUNC]
        EACCES
   209: read (FD 3) 100
        EBADF
   210: close (FD 3)
        EBADF

   212: open f1.txt [O_RDONLY]
        RV_num(3)
   213: read (FD 3) 100
        RV_bytes("0123456789")
   214: close (FD 3)
        RV_none

   216: chmod f1.txt 0o644
        RV_none
   217: open f1.txt [O_RDONLY;O_TRUNC]
        RV_num(3)
   218: read (FD 3) 100
        RV_bytes("")
   219: close (FD 3)
        RV_none

   221: open f1.txt [O_RDONLY]
        RV_num(3)
   222: read (FD 3) 100
        RV_bytes("")
   223: close (FD 3)
        RV_none


        ##############################################
        # O_DIRECTORY
        ##############################################

        # using O_DIRECTORY with dirs is fine
        # but we can't do anything afterwards :-)
   232: open d1 [O_RDONLY;O_DIRECTORY]
        RV_num(3)
   233: read (FD 3) 100
        EISDIR
   234: close (FD 3)
        RV_none

        # using O_DIRECTORY with files fails
   237: open f1.txt [O_RDONLY;O_DIRECTORY]
        RV_num(3)
   238: read (FD 3) 100
        RV_bytes("")
   239: close (FD 3)
        RV_none

        # using O_DIRECTORY on non-existing files
   242: open no-such-file.txt [O_RDONLY;O_DIRECTORY]
        ENOENT
   243: read (FD 3) 100
        EBADF
   244: close (FD 3)
        EBADF

        # using O_DIRECTORY on non-existing dir
   247: open /no-such-dir/ [O_RDONLY;O_DIRECTORY]
        ENOENT
   248: read (FD 3) 100
        EBADF
   249: close (FD 3)
        EBADF

        # we can't create directories
   252: open /no-such-dir/ [O_RDONLY;O_CREAT;O_DIRECTORY]
        EISDIR
   253: read (FD 3) 100
        EBADF
   254: close (FD 3)
        EBADF

   256: open /no-such-dir/ [O_RDONLY;O_CREAT]
        EISDIR
   257: read (FD 3) 100
        EBADF
   258: close (FD 3)
        EBADF


        ##############################################
        # O_APPEND
        ##############################################

        # write fresh content
   266: open f1.txt [O_RDWR;O_TRUNC]
        RV_num(3)
   267: write (FD 3) "0123456789" 10
        RV_num(10)
   268: pread (FD 3) 100 0
        RV_bytes("0123456789")
   269: close (FD 3)
        RV_none

        # override at beginning
   272: open f1.txt [O_RDWR]
        RV_num(3)
   273: write (FD 3) "ABCDE" 5
        RV_num(5)
   274: pread (FD 3) 100 0
        RV_bytes("ABCDE56789")
   275: close (FD 3)
        RV_none

        # override at end
   278: open f1.txt [O_RDWR;O_APPEND]
        RV_num(3)
   279: write (FD 3) "ABCDE" 5
        RV_num(5)
   280: pread (FD 3) 100 0
        RV_bytes("ABCDE56789ABCDE")
   281: close (FD 3)
        RV_none

        # O_APPEND sets file-offset before every(!) write
   284: open f1.txt [O_RDWR;O_APPEND]
        RV_num(3)
   285: write (FD 3) "XXX" 3
        RV_num(3)
   286: lseek (FD 3) 0 SEEK_SET
        RV_num(0)
   287: write (FD 3) "YYY" 3
        RV_num(3)
   288: lseek (FD 3) 0 SEEK_SET
        RV_num(0)
   289: write (FD 3) "ZZZ" 3
        RV_num(3)
   290: read (FD 3) 100
        RV_bytes("")
   291: lseek (FD 3) 0 SEEK_SET
        RV_num(0)
   292: read (FD 3) 100
        RV_bytes("ABCDE56789ABCDEXXXYYYZZZ")
   293: close (FD 3)
        RV_none

        # O_APPEND also affects pwrite
   296: open f1.txt [O_RDWR;O_APPEND]
        RV_num(3)
   297: pwrite (FD 3) "AAA" 3 0
        RV_num(3)
   298: pwrite (FD 3) "BBB" 3 -1
        EINVAL
   299: pwrite (FD 3) "CCC" 3 5
        RV_num(3)
   300: pread (FD 3) 100 0
        RV_bytes("ABCDE56789ABCDEXXXYYYZZZAAACCC")
   301: close (FD 3)
        RV_none

        # pwrite does not modify fd-offset, whereas write does
   304: open f1.txt [O_RDWR;O_APPEND]
        RV_num(3)
   305: lseek (FD 3) 0 SEEK_CUR
        RV_num(0)
   306: pwrite (FD 3) "DDD" 3 0
        RV_num(3)
   307: lseek (FD 3) 0 SEEK_CUR
        RV_num(0)
   308: write (FD 3) "EEE" 3
        RV_num(3)
   309: lseek (FD 3) 0 SEEK_CUR
        RV_num(36)
   310: pread (FD 3) 100 0
        RV_bytes("ABCDE56789ABCDEXXXYYYZZZAAACCCDDDEEE")
   311: close (FD 3)
        RV_none


        # O_APPEND does only influence write and pwrite
   315: open f1.txt [O_RDWR;O_APPEND]
        RV_num(3)
   316: read (FD 3) 100
        RV_bytes("ABCDE56789ABCDEXXXYYYZZZAAACCCDDDEEE")
   317: close (FD 3)
        RV_none

   319: open f1.txt [O_RDWR;O_APPEND]
        RV_num(3)
   320: pread (FD 3) 100 0
        RV_bytes("ABCDE56789ABCDEXXXYYYZZZAAACCCDDDEEE")
   321: close (FD 3)
        RV_none

   323: open f1.txt [O_RDWR;O_APPEND]
        RV_num(3)
   324: lseek (FD 3) 0 SEEK_CUR
        RV_num(0)
   325: close (FD 3)
        RV_none


        ##############################################
        # testing file permissions
        ##############################################

        # read-only needs read permission
   333: chmod f1.txt 0o400
        RV_none
   334: open_close f1.txt [O_RDONLY]
        RV_none

   336: chmod f1.txt 0o000
        RV_none
   337: open_close f1.txt [O_RDONLY]
        EACCES


        # write-only needs write permission
   341: chmod f1.txt 0o200
        RV_none
   342: open_close f1.txt [O_WRONLY]
        RV_none

   344: chmod f1.txt 0o000
        RV_none
   345: open_close f1.txt [O_WRONLY]
        EACCES

   347: chmod f1.txt 0o400
        RV_none
   348: open_close f1.txt [O_WRONLY]
        EACCES

        # read-write needs read and write permission
   351: chmod f1.txt 0o600
        RV_none
   352: open_close f1.txt [O_RDWR]
        RV_none

   354: chmod f1.txt 0o400
        RV_none
   355: open_close f1.txt [O_RDWR]
        EACCES

   357: chmod f1.txt 0o200
        RV_none
   358: open_close f1.txt [O_RDWR]
        EACCES

   360: chmod f1.txt 0o000
        RV_none
   361: open_close f1.txt [O_RDWR]
        EACCES


        # truncate requires write permission
   365: chmod f1.txt 0o600
        RV_none
   366: open_close f1.txt [O_RDONLY;O_TRUNC]
        RV_none

   368: chmod f1.txt 0o400
        RV_none
   369: open_close f1.txt [O_RDONLY;O_TRUNC]
        EACCES


        # append makes only sense with write, but 
        # does not require it
   374: chmod f1.txt 0o400
        RV_none
   375: open f1.txt [O_RDONLY;O_APPEND]
        RV_num(3)
   376: write (FD 3) "0123456789" 10
        EBADF
   377: close (FD 3)
        RV_none


        ##############################################
        # testing dir permissions
        ##############################################

        # creating a file needs search and write permission
        # to the parent directory
   386: chmod d1 0o000
        RV_none
   387: open_close d1/f2.txt [O_WRONLY;O_CREAT] 0o644
        EACCES

   389: chmod d1 0o200
        RV_none
   390: open_close d1/f2.txt [O_WRONLY;O_CREAT] 0o644
        EACCES

   392: chmod d1 0o100
        RV_none
   393: open_close d1/f2.txt [O_WRONLY;O_CREAT] 0o644
        EACCES

   395: chmod d1 0o300
        RV_none
   396: open_close d1/f2.txt [O_WRONLY;O_CREAT] 0o644
        RV_none


        # to read a file, we needs search permission for the
        # parent directory (as well as to the file itself)

   402: chmod d1 0o000
        RV_none
   403: open_close d1/f2.txt [O_RDONLY]
        EACCES

   405: chmod d1 0o100
        RV_none
   406: open_close d1/f2.txt [O_RDONLY]
        RV_none


        # search permission to the parent is enough to modify a file
   410: chmod d1 0o000
        RV_none
   411: open_close d1/f2.txt [O_WRONLY]
        EACCES

   413: chmod d1 0o100
        RV_none
   414: open_close d1/f2.txt [O_WRONLY]
        RV_none

        # clean-up for dump etc.
   417: chmod d1 0o700
        RV_none
